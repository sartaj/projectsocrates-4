Passing an item by reference allows it not to be recreated every single time, meaning that the hashkey persists. If you recreate the item, then it generates a new hashkey.

	Can we pass the item by reference to ngRepeat in a new location?

"track by" augmentation for ngRepeat... This feature allows you to associate a JavaScript object with an ngRepeat DOM (Document Object Model) node using a unique identifier. With this association in place, AngularJS will not $destroy and re-create DOM nodes unnecessarily.

	If you've associated an object with an ngRepeat DOM node by using trackBy, angular won't get rid of it unnecessarily and will give it a unique ID.

AngularJS knows which DOM element to update with ngRepeat by injecting expando properties into the DOM element as well as into the individual items of your collection. At the time of this writing, the expando property injected into your collection items is called "$$hashKey". During the execution of the ngRepeat, AngularJS then maps the $$hashKey onto the expando property injected into the DOM; if the two line up, AngularJS does not create a new DOM node.

	Each element created through ngRepeat has a $$hashkey associated with it.
	When ngRepeat executes...
		the object's $$hashkey is mapped onto the DOM's hashkey
		if they're the same, no new DOM node is created 
	Does this $$hashkey changes every time that it's updated . . . I think so.
	How do I get an item's $$hashkey?

With the new "track by" syntax, I can now tell AngularJS which object property (or property path) should be used to associate a JavaScript object with a DOM node. This means that I can swap out JavaScript objects without destroying DOM nodes so long as the "track by" association still works.

	Can you swap out DOM nodes and keep them with the same object??
	Apply a filter to items in conjunction with a tracking expression. . .
		item in items | filter:query track by item.id

----------

variable in expression track by tracking_expression â€“ You can also provide an optional tracking function which can be used to associate the objects in the collection with the DOM elements. If no tracking function is specified the ng-repeat associates elements by identity in the collection.

	I want to associate the dom elements with the objects in the collection, not the objects in the collection with the dom elements

item in items track by $id(item). A built in $id() function can be used to assign a unique $$hashKey property to each item in the array. This property is then used as a key to associated DOM elements with the corresponding item in the array by identity. Moving the same object in array would move the DOM element in the same way in the DOM.

For example: item in items track by item.id is a typical pattern when the items come from the database. In this case the object identity does not matter. Two objects are considered equivalent as long as their id property is same.

------------

so we want a dom element...
	that is binded to an object
	...but moves around the page.
	it's recreated every time it moves
	...but it references the same object.
	we can't have more than one dom element referencing the same object!
	...fucks up the hashmap

when we create dom elements via ngRepeat. . .
	each element has a $$hashkey
	using track by, each object/item is also associated with a hashkey
	when using ng-repeat, if the hashkey of the dom element is the same as the hashkey of the object/item that is being generated, the no new dom element is created.
	if they're different, then a new dom element is created

a dom element's hashkey is going to change if it's moved.

-------------------
function getCurrentElementHash() = $id(focusedElement);

//before moving something...
	var oldHash = getCurrentElementHash();

//after moving. . .
	var newHash = getCurrentElementHash()
//bind Object to movedElement by assigning hashkey of new element to it
	updateObjectHash(objectList,oldHash,newHas)

How do you get a hashkey?


